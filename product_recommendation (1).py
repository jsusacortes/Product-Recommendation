# -*- coding: utf-8 -*-
"""Product Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s95o2R-El5XjgLLtrZzOKOuO1ZwpR-YI
"""

products = [
    {"name": "Eco Water Bottle", "tags": ["eco-friendly", "durable", "recyclable"]},
    {"name": "Trail Backpack", "tags": ["durable", "water-resistant", "lightweight"]},
    {"name": "Vegan Leather Wallet", "tags": ["vegan", "stylish", "compact"]},
    {"name": "Bamboo Toothbrush", "tags": ["eco-friendly", "vegan", "biodegradable"]},
    {"name": "Smartwatch", "tags": ["tech", "durable", "stylish"]},
    {"name": "LED Desk Lamp", "tags": ["energy-efficient", "adjustable", "stylish"]},
    {"name": "Running Shoes", "tags": ["lightweight", "durable", "comfortable"]},
    {"name": "Bluetooth Speaker", "tags": ["portable", "tech", "wireless"]},
    {"name": "Portable Charger", "tags": ["tech", "travel-friendly", "reliable"]},
    {"name": "Noise-Cancelling Headphones", "tags": ["tech", "quiet", "comfortable"]},
    {"name": "Compost Bin", "tags": ["eco-friendly", "kitchen", "odor-resistant"]},
    {"name": "Yoga Mat", "tags": ["fitness", "non-slip", "lightweight"]},
    {"name": "Reusable Grocery Bags", "tags": ["eco-friendly", "reusable", "foldable"]},
    {"name": "Ergonomic Office Chair", "tags": ["comfortable", "adjustable", "supportive"]},
    {"name": "Air Purifier", "tags": ["tech", "health", "quiet"]},
    {"name": "Gaming Mouse", "tags": ["tech", "responsive", "ergonomic"]},
    {"name": "Fitness Tracker", "tags": ["tech", "fitness", "wearable"]},
    {"name": "Standing Desk", "tags": ["adjustable", "ergonomic", "modern"]},
    {"name": "Mini Projector", "tags": ["portable", "tech", "entertainment"]},
    {"name": "Cast Iron Skillet", "tags": ["durable", "kitchen", "versatile"]},
    {"name": "Electric Kettle", "tags": ["kitchen", "tech", "energy-efficient"]},
    {"name": "Foldable Bike", "tags": ["eco-friendly", "portable", "fitness"]},
    {"name": "Smart Thermostat", "tags": ["tech", "energy-efficient", "smart-home"]},
    {"name": "Wool Blanket", "tags": ["warm", "natural", "cozy"]},
    {"name": "Digital Notebook", "tags": ["tech", "reusable", "stylish"]},
    {"name": "Bamboo Cutlery Set", "tags": ["eco-friendly", "reusable", "compact"]},
    {"name": "Compact Air Fryer", "tags": ["kitchen", "tech", "compact"]},
    {"name": "Solar Phone Charger", "tags": ["eco-friendly", "tech", "travel-friendly"]},
    {"name": "Insulated Lunch Box", "tags": ["kitchen", "portable", "durable"]},
    {"name": "Smart Light Bulbs", "tags": ["tech", "energy-efficient", "smart-home"]},
    {"name": "Laptop Stand", "tags": ["tech", "ergonomic", "portable"]},
    {"name": "Electric Bike", "tags": ["eco-friendly", "tech", "fitness"]},
    {"name": "Digital Pen", "tags": ["tech", "writing", "portable"]},
    {"name": "Silicone Food Storage Bags", "tags": ["kitchen", "reusable", "eco-friendly"]},
    {"name": "UV Sanitizer Box", "tags": ["tech", "health", "compact"]},
    {"name": "Virtual Reality Headset", "tags": ["tech", "entertainment", "immersive"]},
    {"name": "Hydroponic Indoor Garden", "tags": ["eco-friendly", "tech", "kitchen"]},
    {"name": "Wireless Charging Pad", "tags": ["tech", "convenient", "modern"]},
    {"name": "Magnetic Whiteboard", "tags": ["office", "reusable", "functional"]},
    {"name": "LED String Lights", "tags": ["decor", "energy-efficient", "stylish"]},
    {"name": "Adjustable Dumbbells", "tags": ["fitness", "compact", "durable"]},
    {"name": "Weighted Blanket", "tags": ["cozy", "health", "comfortable"]},
    {"name": "Camping Stove", "tags": ["portable", "outdoors", "reliable"]},
    {"name": "Touchless Trash Can", "tags": ["kitchen", "tech", "convenient"]},
    {"name": "Electric Toothbrush", "tags": ["tech", "health", "rechargeable"]},
    {"name": "Noise Machine", "tags": ["health", "sleep", "portable"]},
    {"name": "Pet Water Fountain", "tags": ["tech", "pet", "eco-friendly"]},
    {"name": "Motion Sensor Light", "tags": ["tech", "smart-home", "safety"]},
    {"name": "Smart Door Lock", "tags": ["tech", "security", "smart-home"]},
    {"name": "Cold Brew Coffee Maker", "tags": ["kitchen", "compact", "durable"]}
]

import pandas as pd

products_data = pd.read_csv("product_data.txt")

# TODO: Step 1 - Print out the products to see the data that you are working with.

print(products_data)

# TODO: Step 2 - Create a list called customer_preferences and store the user preference in this list.

customer_preferences = []

response = ""
while response != "N":
    preference = input("Input a preference: ").strip().lower()
    customer_preferences.append(preference)
    response = input("Do you want to add another preference? (Y/N): ").upper()

customer_tags = set(customer_preferences)
print("Customer tags:", customer_tags)

# TODO: Step 3 - Convert customer_preferences list to set to eliminate duplicates.
customer_tags = set(customer_preferences)
print(customer_tags)

# TODO: Step 4 - Convert the product tags to sets in order to allow for faster comparisons.
converted_products = [
    {
        "name": product["name"],
        "tags": set(tag.strip().lower() for tag in product["tags"])
    }
    for product in products
]

# TODO: Step 5 - Write a function to calculate the number of matching tags
def count_matches(product_tags, customer_tags):
    '''
    Args:
        product_tags (set): A set of tags associated with a product.
        customer_tags (set): A set of tags associated with the customer.
    Returns:
        int: The number of matching tags between the product and customer.
    '''
    return len(product_tags & customer_tags)

# TODO: Step 6 - Write a function that loops over all products and returns a sorted list of matches
def recommend_products(products, customer_tags):
    '''
    Args:
        products (list): A list of product dictionaries.
        customer_tags (set): A set of tags associated with the customer.
    Returns:
        list: A list of products containing product names and their match counts.
    '''
    recommendations = []
    for product in products:
        matches = count_matches(product["tags"], customer_tags)
        recommendations.append({"name": product["name"], "matches": matches})

    # Sort products by match count (descending)
    recommendations.sort(key=lambda x: x["matches"], reverse=True)
    return recommendations

# TODO: Step 7 - Call your function and print the results


results = recommend_products(converted_products, customer_tags)
results_df = pd.DataFrame(results)
print(results_df)

"""

# DESIGN MEMO (write below in a comment):
# 1. What core operations did you use (e.g., intersections, loops)? Why?
# 2. How might this code change if you had 1000+ products?



1.

Loops:

Loops are necessary for going through each product and checking its tags.

Set conversion & intersections:

Used the intersection operation find matching tags between the customer and each product.


Sorting:

After calculating matches, sorted products by match count (descending) to recommend the most relevant products first.

Normalization:

Converted all tags and inputs to lowercase and stripped spaces to ensure proper matching despite differences in capitalization or extra spaces.

2.

Performance concerns:

Doing this with over 1000+ products could work, the problem is if it gets bigger is harder and the performance might slow down

"""

